from telegram import Update
from telegram.ext import CallbackContext

from services.appeal_service import process_poll_results


def poll_answer_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è (–Ω–µ –ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–∏—Ö poll'—ñ–≤)"""
    # –î–ª—è –∞–Ω–æ–Ω—ñ–º–Ω–∏—Ö –≥–æ–ª–æ—Å—É–≤–∞–Ω—å —Ü–µ–π —Ö–µ–Ω–¥–ª–µ—Ä –Ω–µ —Å–ø—Ä–∞—Ü—å–æ–≤—É—î
    pass


def poll_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–æ–±–ª—è—î –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –≥–æ–ª–æ—Å—É–≤–∞–Ω—å, –≤–∫–ª—é—á–∞—é—á–∏ —ó—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è"""

    poll = update.poll

    if not poll:
        return

    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ
    if not poll.is_closed:
        return

    try:
        # –ü—ñ–¥—Ä–∞—Ö–æ–≤—É—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        poll_results = {}
        total_voter_count = poll.total_voter_count

        for option in poll.options:
            poll_results[option.text] = option.voter_count

        # –û–±—Ä–æ–±–ª—è—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        winner = process_poll_results(poll.id, poll_results)

        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏
        chat_id = update.effective_chat.id

        if total_voter_count < 6:
            message = f"üìä Poll ended!\n\n"
            message += f"‚ùå Not enough votes to award bonus points.\n"
            message += f"Votes received: {total_voter_count}\n"
            message += f"Required minimum: 6\n\n"
            message += "üìà Poll results:\n"
            for option, votes in sorted(poll_results.items(), key=lambda x: x[1], reverse=True):
                percentage = (votes / total_voter_count * 100) if total_voter_count > 0 else 0
                message += f"‚Ä¢ {option}: {votes} ({percentage:.1f}%)\n"

        elif winner:
            winner_votes = poll_results[winner]
            win_percentage = (winner_votes / total_voter_count) * 100

            message = f"üìä Poll ended!\n\n"
            message += f"üèÜ MVP selected: **{winner}**\n"
            message += f"‚úÖ Received {winner_votes} out of {total_voter_count} votes ({win_percentage:.1f}%)\n"
            message += f"üéâ Bonus points added for each match played today!\n\n"
            message += "üìà Full results:\n"
            for option, votes in sorted(poll_results.items(), key=lambda x: x[1], reverse=True):
                percentage = (votes / total_voter_count * 100) if total_voter_count > 0 else 0
                emoji = "üèÜ" if option == winner else "‚Ä¢"
                message += f"{emoji} {option}: {votes} ({percentage:.1f}%)\n"

        else:
            max_votes = max(poll_results.values()) if poll_results else 0
            max_percentage = (max_votes / total_voter_count * 100) if total_voter_count > 0 else 0

            message = f"üìä Poll ended!\n\n"
            message += f"‚ùå No player received enough votes (66%+ required).\n"
            message += f"Top vote count: {max_votes} ({max_percentage:.1f}%)\n"
            message += f"Total votes: {total_voter_count}\n\n"
            message += "üìà Poll results:\n"
            for option, votes in sorted(poll_results.items(), key=lambda x: x[1], reverse=True):
                percentage = (votes / total_voter_count * 100) if total_voter_count > 0 else 0
                message += f"‚Ä¢ {option}: {votes} ({percentage:.1f}%)\n"

        context.bot.send_message(
            chat_id=chat_id,
            text=message,
            parse_mode="Markdown"
        )

    except Exception as e:
        print(f"‚ùå Error while processing finished poll: {e}")
        context.bot.send_message(
            chat_id=update.effective_chat.id,
            text="‚ö†Ô∏è An error occurred while processing the poll results.")