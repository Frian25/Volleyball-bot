import os
import json
import logging
import gspread
import uuid
from datetime import datetime
from oauth2client.service_account import ServiceAccountCredentials
from flask import Flask, request
from telegram import Bot, Update
from telegram.ext import Dispatcher, CommandHandler

# –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# Flask –¥–æ–¥–∞—Ç–æ–∫
app = Flask(__name__)

# –û—Ç—Ä–∏–º—É—î–º–æ JSON –∑ –∫–ª—é—á–∞–º–∏ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
creds_dict = json.loads(os.environ["CREDS_JSON"])

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Google Sheets API
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

sheet = client.open_by_url(
    "https://docs.google.com/spreadsheets/d/1caXAMQ-xYbBt-8W6pMVOM99vaxabgSeDwIhp1Wsh6Dg/edit?gid=1122235250#gid=1122235250").worksheet(
    "Matches")


def get_team_players(team_name, match_date):
    """–û—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä–∞–≤—Ü—ñ–≤ –∫–æ–º–∞–Ω–¥–∏ –Ω–∞ –ø–µ–≤–Ω—É –¥–∞—Ç—É"""
    try:
        teams_sheet = client.open_by_url(
            "https://docs.google.com/spreadsheets/d/1caXAMQ-xYbBt-8W6pMVOM99vaxabgSeDwIhp1Wsh6Dg/edit?gid=1122235250#gid=1122235250").worksheet(
            "Teams")

        all_rows = teams_sheet.get_all_values()
        headers = all_rows[0]
        data_rows = all_rows[1:]

        # –ó–Ω–∞–π—Ç–∏ —Ä—è–¥–æ–∫ –∑ –ø–æ—Ç—Ä—ñ–±–Ω–æ—é –∫–æ–º–∞–Ω–¥–æ—é —ñ –¥–∞—Ç–æ—é
        for row in data_rows:
            if len(row) >= 3 and row[0] == match_date:  # date
                if row[1] == team_name:  # team_1
                    return row[2].split(', ') if row[2] else []  # team_1_players
                elif len(row) >= 5 and row[4] == team_name:  # team_2
                    return row[5].split(', ') if row[5] else []  # team_2_players

        return []
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≥—Ä–∞–≤—Ü—ñ–≤ –∫–æ–º–∞–Ω–¥–∏: {e}")
        return []


def update_rating_table(match_id, match_date, team1, team2):
    """–û–Ω–æ–≤–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é Rating –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ —É—á–∞—Å—Ç—å –≥—Ä–∞–≤—Ü—ñ–≤"""
    try:
        rating_sheet = client.open_by_url(
            "https://docs.google.com/spreadsheets/d/1caXAMQ-xYbBt-8W6pMVOM99vaxabgSeDwIhp1Wsh6Dg/edit?gid=1122235250#gid=1122235250").worksheet(
            "Rating")

        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –æ–±–æ—Ö –∫–æ–º–∞–Ω–¥
        team1_players = get_team_players(team1, match_date)
        team2_players = get_team_players(team2, match_date)

        all_players = team1_players + team2_players

        if not all_players:
            logging.warning(f"–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≥—Ä–∞–≤—Ü—ñ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥ {team1} —ñ {team2} –Ω–∞ –¥–∞—Ç—É {match_date}")
            return

        # –û—Ç—Ä–∏–º–∞—Ç–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ñ Rating
        rating_headers = rating_sheet.row_values(1)

        # –ü—ñ–¥–≥–æ—Ç—É–≤–∞—Ç–∏ —Ä—è–¥–æ–∫ –¥–ª—è –¥–æ–¥–∞–≤–∞–Ω–Ω—è
        row_to_add = [match_id, match_date]

        # –î–ª—è –∫–æ–∂–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö (–ø–æ—á–∏–Ω–∞—é—á–∏ –∑ 3-–≥–æ —Å—Ç–æ–≤–ø—Ü—è)
        for i in range(2, len(rating_headers)):
            player_name = rating_headers[i]
            # –ü–æ—Å—Ç–∞–≤–∏—Ç–∏ 1 —è–∫—â–æ –≥—Ä–∞–≤–µ—Ü—å –±—Ä–∞–≤ —É—á–∞—Å—Ç—å, —ñ–Ω–∞–∫—à–µ 0
            row_to_add.append(1 if player_name in all_players else 0)

        # –î–æ–¥–∞—Ç–∏ —Ä—è–¥–æ–∫ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ Rating
        rating_sheet.append_row(row_to_add)
        logging.info(f"–î–æ–¥–∞–Ω–æ —Ä—è–¥–æ–∫ –¥–æ Rating –¥–ª—è –º–∞—Ç—á—É {match_id}")

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Ç–∞–±–ª–∏—Ü—ñ Rating: {e}")


# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞
bot_token = os.environ["BOT_TOKEN"]
bot = Bot(token=bot_token)


# –§—É–Ω–∫—Ü—ñ—è /result –∫–æ–º–∞–Ω–¥–∞1 —Ä–∞—Ö—É–Ω–æ–∫1 –∫–æ–º–∞–Ω–¥–∞2 —Ä–∞—Ö—É–Ω–æ–∫2
def result(update, context):
    try:
        if update.message.chat.type == 'private':
            update.message.reply_text("‚ö†Ô∏è –¢–∏ –∫–æ–≥–æ —Ö–æ—á–µ—à –Ω–∞—ó–±–∞—Ç–∏? –ù–∞–ø–∏—à–∏ –≤ –≥—Ä—É–ø—É —Ö–∞–π –≤—Å—ñ –ø–æ–±–∞—á–∞—Ç—å.")
            return
        # –û–±'—î–¥–Ω—É—î–º–æ –∞—Ä–≥—É–º–µ–Ω—Ç–∏ —É —Ä—è–¥–æ–∫
        text = " ".join(context.args)

        if "-" not in text:
            raise ValueError("–ö–æ–º–∞–Ω–¥–∞ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ '-'")

        part1, part2 = [part.strip() for part in text.split("-", 1)]

        # –í part1 –æ—Å—Ç–∞–Ω–Ω—î —Å–ª–æ–≤–æ ‚Äî —Ä–∞—Ö—É–Ω–æ–∫1, –≤—Å–µ —ñ–Ω—à–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞1
        tokens1 = part1.rsplit(" ", 1)
        if len(tokens1) != 2:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥—É 1 —ñ —Ä–∞—Ö—É–Ω–æ–∫")
        team1 = tokens1[0]
        score1 = int(tokens1[1])

        # –í part2 –ø–µ—Ä—à–µ —Å–ª–æ–≤–æ ‚Äî —Ä–∞—Ö—É–Ω–æ–∫2, –≤—Å–µ —ñ–Ω—à–µ ‚Äî –∫–æ–º–∞–Ω–¥–∞2
        tokens2 = part2.split(" ", 1)
        if len(tokens2) != 2:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ —ñ –∫–æ–º–∞–Ω–¥—É 2")
        score2 = int(tokens2[0])
        team2 = tokens2[1]

        # –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ YYYY-MM-DD
        today = datetime.now().strftime("%Y-%m-%d")

        # –û—Ç—Ä–∏–º–∞—î–º–æ –≤—Å—ñ –¥–∞–Ω—ñ –∑ —Ç–∞–±–ª–∏—Ü—ñ
        all_rows = sheet.get_all_values()
        headers = all_rows[0]
        data_rows = all_rows[1:]

        # –ó–Ω–∞–π–¥–µ–º–æ —ñ–Ω–¥–µ–∫—Å —Å—Ç–æ–≤–ø—Ü—è –∑ –¥–∞—Ç–æ—é
        date_index = headers.index("date") if "date" in headers else 1

        # –ü–æ—Ä–∞—Ö—É–≤–∞—Ç–∏ –º–∞—Ç—á—ñ —Å—å–æ–≥–æ–¥–Ω—ñ
        today_matches = [row for row in data_rows if len(row) > date_index and row[date_index] == today]
        match_number = len(today_matches) + 1

        # –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π match_id
        match_id = str(uuid.uuid4())[:8]

        # –ó–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—é
        row_to_add = [
            match_id,
            today,
            match_number,
            team1,
            team2,
            score1,
            score2
        ]
        sheet.append_row(row_to_add)

        # –î–û–î–ê–ù–û: –û–Ω–æ–≤–∏—Ç–∏ —Ç–∞–±–ª–∏—Ü—é Rating
        update_rating_table(match_id, today, team1, team2)

        # –ü–Ü–î–°–£–ú–ö–û–í–ò–ô –†–ê–•–£–ù–û–ö –ó–ê –°–¨–û–ì–û–î–ù–Ü
        wins = {}

        # –í—Ä–∞—Ö–æ–≤—É—î–º–æ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ –º–∞—Ç—á—ñ
        for row in today_matches:
            if len(row) >= 7:
                winner = row[7]  # –ü—Ä–∏–ø—É—Å–∫–∞—é, —â–æ –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å —É 8-–º—É —Å—Ç–æ–≤–ø—á–∏–∫—É (—ñ–Ω–¥–µ–∫—Å 7)
                if winner:  # –Ø–∫—â–æ –Ω–µ –Ω—ñ—á–∏—è —ñ –ø–µ—Ä–µ–º–æ–∂–µ—Ü—å —î
                    wins[winner] = wins.get(winner, 0) + 1

        # –î–æ–¥–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π –º–∞—Ç—á
        if team1 != team2:  # –ø–µ—Ä–µ–≤—ñ—Ä–∏–º–æ —á–∏ –º–∞—Ç—á –Ω–µ –º—ñ–∂ –æ–¥–Ω—ñ—î—é –∫–æ–º–∞–Ω–¥–æ—é (–Ω–∞ –≤—Å—è–∫ –≤–∏–ø–∞–¥–æ–∫)
            if score1 > score2:
                wins[team1] = wins.get(team1, 0) + 1
            elif score2 > score1:
                wins[team2] = wins.get(team2, 0) + 1
            else:
                wins[team1] = wins.get(team1, 0) + 1
                wins[team2] = wins.get(team2, 0) + 1
            # –Ω—ñ—á–∏—è ‚Äî –Ω—ñ—á–æ–≥–æ –Ω–µ –¥–æ–¥–∞—î–º–æ

        # –°—Ñ–æ—Ä–º—É—î–º–æ –∑—Ä—É—á–Ω–∏–π –≤–∏–≥–ª—è–¥ –ø—ñ–¥—Å—É–º–∫—É
        summary = f"{team1} {wins.get(team1, 0)} ‚Äî {wins.get(team2, 0)} {team2}"

        # –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        update.message.reply_text(
            f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {team1} {score1} ‚Äî {team2} {score2} (–º–∞—Ç—á #{match_number} –∑–∞ {today})\n"
            f"üìä –ó–∞–≥–∞–ª—å–Ω–∏–π —Ä–∞—Ö—É–Ω–æ–∫: {summary}"
        )
    except Exception as e:
        update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}\n–°–ø—Ä–æ–±—É–π —É —Ñ–æ—Ä–º–∞—Ç—ñ: /result –ö–æ–º–∞–Ω–¥–∞1 —Ä–∞—Ö—É–Ω–æ–∫1 - —Ä–∞—Ö—É–Ω–æ–∫2 –ö–æ–º–∞–Ω–¥–∞2")


def delete(update, context):
    try:
        # üîí –î–æ–∑–≤–æ–ª–∏—Ç–∏ –ª–∏—à–µ –≤ –≥—Ä—É–ø–æ–≤–∏—Ö —á–∞—Ç–∞—Ö
        if update.message.chat.type == 'private':
            update.message.reply_text("‚ö†Ô∏è –¢–∏ –∫–æ–≥–æ —Ö–æ—á–µ—à –Ω–∞—ó–±–∞—Ç–∏? –ù–∞–ø–∏—à–∏ –≤ –≥—Ä—É–ø—É, —Ö–∞–π –≤—Å—ñ –ø–æ–±–∞—á–∞—Ç—å.")
            return

        # –û—Ç—Ä–∏–º–∞—Ç–∏ –≤—Å—ñ —Ä—è–¥–∫–∏ (–≤–∫–ª—é—á–∞—é—á–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        all_rows = sheet.get_all_values()
        if len(all_rows) <= 1:
            update.message.reply_text("‚ö†Ô∏è –£ —Ç–∞–±–ª–∏—Ü—ñ –Ω–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
            return

        headers = all_rows[0]
        data_rows = all_rows[1:]
        date_index = headers.index("date") if "date" in headers else 1

        today = datetime.now().strftime("%Y-%m-%d")

        # –ó–Ω–∞–π—Ç–∏ –≤—Å—ñ —ñ–Ω–¥–µ–∫—Å–∏ —Ä—è–¥–∫—ñ–≤, –¥–µ date == today
        deletable_indices = [
            i + 2  # +2 –±–æ 1-–π —Ä—è–¥–æ–∫ ‚Äî –∑–∞–≥–æ–ª–æ–≤–∫–∏, —ñ–Ω–¥–µ–∫—Å–∞—Ü—ñ—è –∑ 1
            for i, row in enumerate(data_rows)
            if len(row) > date_index and row[date_index] == today
        ]

        if not deletable_indices:
            update.message.reply_text("‚ö†Ô∏è –ù–µ–º–∞—î –∑–∞–ø–∏—Å—ñ–≤ –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è.")
            return

        # –í–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –∑–Ω–∞–π–¥–µ–Ω—ñ —Ä—è–¥–∫–∏ –∑–Ω–∏–∑—É –≤–≥–æ—Ä—É (—â–æ–± —ñ–Ω–¥–µ–∫—Å–∏ –Ω–µ –∑–º—ñ—â—É–≤–∞–ª–∏—Å—è)
        sheet.delete_rows(deletable_indices[-1])

        update.message.reply_text(f"‚úÖ –í–∏–¥–∞–ª–µ–Ω–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–æ–±–∞–≤–ª–µ–Ω–∏–π —Ä—è–¥–æ–∫.")

    except Exception as e:
        update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ: {e}")


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
dispatcher = Dispatcher(bot, None, workers=0)
dispatcher.add_handler(CommandHandler("result", result))
dispatcher.add_handler(CommandHandler("delete", delete))


# Webhook endpoint
@app.route(f'/{bot_token}', methods=['POST'])
def webhook():
    try:
        # –û—Ç—Ä–∏–º–∞—Ç–∏ –¥–∞–Ω—ñ –≤—ñ–¥ Telegram
        json_data = request.get_json()

        # –û–±—Ä–æ–±–∏—Ç–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
        update = Update.de_json(json_data, bot)
        dispatcher.process_update(update)

        return 'OK'
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ webhook: {e}")
        return 'ERROR', 500


# Health check endpoint
@app.route('/', methods=['GET'])
def health():
    return 'Bot is running!'


# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É
def setup_webhook():
    webhook_url = f"https://{os.environ.get('RENDER_EXTERNAL_HOSTNAME')}/{bot_token}"
    bot.set_webhook(url=webhook_url)
    logging.info(f"Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞: {webhook_url}")


if __name__ == "__main__":
    # –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ webhook
    setup_webhook()

    # –ó–∞–ø—É—Å—Ç–∏—Ç–∏ Flask
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)