import os
import json
import logging
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from telegram.ext import Updater, CommandHandler

# –£–≤—ñ–º–∫–Ω—É—Ç–∏ –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –û—Ç—Ä–∏–º—É—î–º–æ JSON –∑ –∫–ª—é—á–∞–º–∏ –∑ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
# ‚ö†Ô∏è –£ Render –¥–æ–¥–∞–π –∑–º—ñ–Ω–Ω—É CREDS_JSON (–¥–∏–≤–∏—Å—å –¥–∞–ª—ñ)
creds_dict = json.loads(os.environ["CREDS_JSON"])

# –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø—É –¥–æ Google Sheets API
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(creds)

# ‚ö†Ô∏è –ó–∞–º—ñ–Ω–∏ –Ω–∞–∑–≤—É —Ç–∞–±–ª–∏—Ü—ñ –Ω–∞ —Å–≤–æ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "Volleyball Scores")
sheet = client.open_by_url("https://docs.google.com/spreadsheets/d/1caXAMQ-xYbBt-8W6pMVOM99vaxabgSeDwIhp1Wsh6Dg/edit?gid=1122235250#gid=1122235250").worksheet("Matches")
# –§—É–Ω–∫—Ü—ñ—è /result –∫–æ–º–∞–Ω–¥–∞1 —Ä–∞—Ö—É–Ω–æ–∫1 –∫–æ–º–∞–Ω–¥–∞2 —Ä–∞—Ö—É–Ω–æ–∫2
def result(update, context):
    try:
        # 1. –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —É —Ñ–æ—Ä–º–∞—Ç—ñ: "–ö–æ–º–∞–Ω–¥–∞1 2 - –ö–æ–º–∞–Ω–¥–∞2 1"
        text = " ".join(context.args)
        if "-" not in text:
            raise ValueError("–§–æ—Ä–º–∞—Ç –º–∞—î –±—É—Ç–∏: –ö–æ–º–∞–Ω–¥–∞1 2 - –ö–æ–º–∞–Ω–¥–∞2 1")

        part1, part2 = [part.strip() for part in text.split("-", 1)]

        tokens1 = part1.rsplit(" ", 1)
        tokens2 = part2.rsplit(" ", 1)

        if len(tokens1) != 2 or len(tokens2) != 2:
            raise ValueError("–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ –∫–æ–º–∞–Ω–¥–∏ –∞–±–æ —Ä–∞—Ö—É–Ω–∫–∏")

        team1 = tokens1[0]
        score1 = int(tokens1[1])
        team2 = tokens2[0]
        score2 = int(tokens2[1])

        # 2. –ü–æ—Ç–æ—á–Ω–∞ –¥–∞—Ç–∞ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD
        today = datetime.now().strftime("%Y-%m-%d")

        # 3. –ü—ñ–¥—Ä–∞—Ö—É–Ω–æ–∫ match_number –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        all_rows = sheet.get_all_values()
        headers = all_rows[0]
        data_rows = all_rows[1:]

        date_index = headers.index("date") if "date" in headers else 1  # safety
        today_matches = [row for row in data_rows if len(row) > date_index and row[date_index] == today]
        match_number = len(today_matches) + 1

        # 4. –£–Ω—ñ–∫–∞–ª—å–Ω–∏–π match_id (–º–æ–∂–Ω–∞ –∑–∞–º—ñ–Ω–∏—Ç–∏ –Ω–∞ —â–æ—Å—å —ñ–Ω—à–µ, —è–∫—â–æ —Ç—Ä–µ–±–∞)
        match_id = str(uuid.uuid4())[:8]  # –∫–æ—Ä–æ—Ç–∫–∏–π UUID

        # 5. –ü–æ—Ä–æ–∂–Ω—ñ –º—ñ—Å—Ü—è –¥–ª—è —Å–µ—Ä–µ–¥–Ω—å–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥—É
        avg_rate_team_1 = ""
        avg_rate_team_2 = ""

        # 6. –ó–∞–ø–∏—Å —É —Ç–∞–±–ª–∏—Ü—é
        row_to_add = [
            match_id,
            today,
            match_number,
            team1,
            team2,
            avg_rate_team_1,
            avg_rate_team_2,
            score1,
            score2
        ]

        sheet.append_row(row_to_add)
        update.message.reply_text(f"‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {team1} {score1} ‚Äî {team2} {score2} (–º–∞—Ç—á #{match_number} –∑–∞ {today})")

    except Exception as e:
        update.message.reply_text(f"‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞: {e}\n–°–ø—Ä–æ–±—É–π —É —Ñ–æ—Ä–º–∞—Ç—ñ: /result –ö–æ–º–∞–Ω–¥–∞1 2 - –ö–æ–º–∞–Ω–¥–∞2 1")

def main():
    # ‚ö†Ô∏è –£ Render –¥–æ–¥–∞–π –∑–º—ñ–Ω–Ω—É BOT_TOKEN (–∑ BotFather)
    bot_token = os.environ["BOT_TOKEN"]

    updater = Updater(bot_token, use_context=True)
    dp = updater.dispatcher

    dp.add_handler(CommandHandler("result", result))

    logging.info("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–∏–π —ñ —Å–ª—É—Ö–∞—î –∫–æ–º–∞–Ω–¥–∏.")
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()

